default_platform(:ios)

platform :ios do
  before_all do
    # Check every environment variable is set
    required_env_vars = [
      "APP_STORE_CONNECT_KEY_ID",
      "APP_STORE_CONNECT_ISSUER_ID",
      "APP_STORE_CONNECT_API_KEY_CONTENT_DECODED",
    ]
    required_env_vars.each do |var|
      if ENV[var].nil? || ENV[var].empty?
        UI.user_error!("Missing environment variable: #{var}")
      end
    end

    setup_ci

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT_DECODED"],
      in_house: false
    )
  end
  
  def update_ios_version(typeUpdate)
    current_version = get_version_number(xcodeproj: "Runner.xcodeproj")
    version_parts = current_version.split(".")

    if typeUpdate == "major"
      version_parts[0] = version_parts[0].to_i + 1
      version_parts[1] = 0
      version_parts[2] = 0
    elsif typeUpdate == "minor"
      version_parts[1] = version_parts[1].to_i + 1
      version_parts[2] = 0
    elsif typeUpdate == "patch"
      version_parts[2] = version_parts[2].to_i + 1
    end

    return version_parts.join(".")
  end

  desc "Submit patch build to TestFlight (internal)"
  lane :internal_patch do
    new_version = update_ios_version("patch")

    increment_version_number(
      version_number: new_version,
      xcodeproj: "Runner.xcodeproj"
    )

    increment_build_number(
      xcodeproj: "Runner.xcodeproj"
    )
    sync_code_signing(type: "appstore")  
    build_ios_app(
      workspace: "Runner.xcworkspace",
      configuration: "Release",
      scheme: "Runner",
      silent: true,
      clean: true,
      output_directory: "./fastlane/build",
      output_name: "app.ipa",
      export_method: "app-store",
    )

    upload_to_testflight(
      ipa: "./fastlane/build/app.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true,
    )
  end

  desc "Submit minor build to TestFlight (internal)"
  lane :internal_minor do
    new_version = update_ios_version("minor")

    increment_version_number(
      version_number: new_version,
      xcodeproj: "Runner.xcodeproj"
    )

    increment_build_number(
      xcodeproj: "Runner.xcodeproj"
    )

    build_ios_app(
      workspace: "Runner.xcworkspace",
      configuration: "Release",
      scheme: "Runner",
      silent: true,
      clean: true,
      output_directory: "./fastlane/build",
      output_name: "app.ipa",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.kajianhub": "com.kajianhub AppStore"
        }
      }
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end

  desc "Submit major build to TestFlight (internal)"
  lane :internal_major do
    new_version = update_ios_version("major")

    increment_version_number(
      version_number: new_version,
      xcodeproj: "Runner.xcodeproj"
    )

    increment_build_number(
      xcodeproj: "Runner.xcodeproj"
    )
    
    build_ios_app(
      workspace: "Runner.xcworkspace",
      configuration: "Release",
      scheme: "Runner",
      silent: true,
      clean: true,
      output_directory: "./fastlane/build",
      output_name: "app.ipa",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.kajianhub": "com.kajianhub AppStore"
        }
      }
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end

  desc "Promote build to App Store"
  lane :promote_internal_to_production do
    upload_to_app_store(
      skip_metadata: true,
      skip_screenshots: true
    )
  end
end