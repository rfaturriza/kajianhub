default_platform(:android)

ENV['SUPPLY_UPLOAD_MAX_RETRIES'] = '5'

def get_latest_build_number
  tracks = %w[internal beta production]
  track_versions = tracks.map do |track|
    google_play_track_version_codes(track: track, json_key_data: ENV['PLAY_STORE_CONFIG_JSON'])[0]
  end
  track_versions.max + 1
end

def get_updated_version_name(type)
  current = google_play_track_release_names(track: "internal", json_key_data: ENV['PLAY_STORE_CONFIG_JSON'])[0]
  major, minor, patch = current.split(".").map(&:to_i)

  case type
  when "major"
    major += 1; minor = 0; patch = 0
  when "minor"
    minor += 1; patch = 0
  when "patch"
    patch += 1
  end

  "#{major}.#{minor}.#{patch}"
end

def update_flutter_version(type)
  flutter_set_version(
    path_to_yaml: "../pubspec.yaml",
    version_name: get_updated_version_name(type),
    version_code: get_latest_build_number.to_s
  )
end

def build_flutter_app
  sh "flutter build appbundle -v --no-deferred-components"
end

def upload_app(track, promote_to: nil)
  upload_to_play_store(
    root_url: "https://androidpublisher.googleapis.com/",
    track: track,
    track_promote_to: promote_to,
    aab: '../build/app/outputs/bundle/release/app-release.aab',
    json_key_data: ENV['PLAY_STORE_CONFIG_JSON'],
    skip_upload_metadata: true,
    skip_upload_images: true,
    skip_upload_screenshots: true,
    skip_upload_changelogs: true
  )
end

def release_lane(update_type: nil, target:)
  update_flutter_version(update_type) if update_type
  build_flutter_app
  sleep(5) # helps avoid upload rejection due to build mismatch
  
  case target
  when "internal"
    upload_app('internal')
  when "beta"
    upload_app('beta')
  when "production"
    upload_app('production')
  when "promote_internal_to_beta"
    upload_app('internal', promote_to: 'beta')
  when "promote_internal_to_production"
    upload_app('internal', promote_to: 'production')
  when "promote_beta_to_production"
    upload_app('beta', promote_to: 'production')
  else
    UI.user_error!("Invalid target: #{target}")
  end
end

platform :android do
  desc "Submit patch update for INTERNAL TESTING build to Google Play"
  lane :internal_patch do
    release_lane(update_type: "patch", target: "internal")
  end

  desc "Submit minor update for INTERNAL TESTING build to Google Play"
  lane :internal_minor do
    release_lane(update_type: "minor", target: "internal")
  end
  
  desc "Submit major update for INTERNAL TESTING build to Google Play"
  lane :internal_major do
    release_lane(update_type: "major", target: "internal")
  end

  desc "Submit patch update for PRODUCTION build to Google Play"
  lane :production_patch do
    release_lane(update_type: "patch", target: "production")
  end

  desc "Submit minor update for PRODUCTION build to Google Play"
  lane :production_minor do
    release_lane(update_type: "minor", target: "production")
  end

  desc "Submit major update for PRODUCTION build to Google Play"
  lane :production_major do
    release_lane(update_type: "major", target: "production")
  end

  desc "Promote INTERNAL track to BETA"
  lane :promote_internal_to_beta do
    release_lane(target: "promote_internal_to_beta")
  end

  desc "Promote INTERNAL track to PRODUCTION"
  lane :promote_internal_to_production do
    release_lane(target: "promote_internal_to_production")
  end

  desc "Promote BETA track to PRODUCTION"
  lane :promote_beta_to_production do
    release_lane(target: "promote_beta_to_production")
  end
end