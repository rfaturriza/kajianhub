default_platform(:ios)

platform :ios do
  before_all do
    # Ensure required environment variables are set
    %w[APP_STORE_CONNECT_KEY_ID APP_STORE_CONNECT_ISSUER_ID APP_STORE_CONNECT_API_KEY_CONTENT].each do |var|
      UI.user_error!("Missing environment variable: #{var}") if ENV[var].to_s.empty?
    end
    setup_ci

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      is_key_content_base64: true,
      in_house: false
    )

    sync_code_signing(type: "appstore")
  end

  private_lane :update_ios_version do |options|
    type = options[:type]
    current_version = get_version_number(xcodeproj: "Runner.xcodeproj")
    current_build_number = app_store_build_number()
    version_parts = current_version.split(".").map(&:to_i)

    case type
    when "major"
      version_parts[0] += 1; version_parts[1] = 0; version_parts[2] = 0
    when "minor"
      version_parts[1] += 1; version_parts[2] = 0
    when "patch"
      version_parts[2] += 1
    else
      UI.user_error!("Invalid update type: #{type}")
    end
    updated_version = version_parts.join('.')
    updated_build_number = current_build_number + 1
    increment_version_number(version_number: updated_version, xcodeproj: "Runner.xcodeproj")
    increment_build_number(build_number: updated_build_number, xcodeproj: "Runner.xcodeproj")
  end

  private_lane :build_ios do
     build_ios_app(
       workspace: "Runner.xcworkspace",
      scheme: "Runner",
       output_directory: "./fastlane/build",
       output_name: "app.ipa",
       configuration: "Release",
       silent: true,
       clean: true,
       export_method: "app-store"
     )
   end

   private_lane :upload_internal do
     upload_to_testflight(
      ipa: "./fastlane/build/app.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true
     )
   end

   private_lane :upload_production do
    upload_to_app_store(
      ipa: "./fastlane/build/app.ipa",
      skip_screenshots: true,
      skip_metadata: true,
      precheck_include_in_app_purchases: false,
      submit_for_review: true
    )
  end

  def release_lane(update_type:, target:)
    update_ios_version(type: update_type)
    build_ios

    case target
    when :internal
      upload_internal
    when :production
      upload_production
    else
      UI.user_error!("Unknown target: #{target}")
    end
  end

  desc "Internal release - patch"
  lane :internal_patch do
    release_lane(update_type: "patch", target: :internal)
  end

  desc "Internal release - minor"
  lane :internal_minor do
    release_lane(update_type: "minor", target: :internal)
  end
  

  desc "Internal release - major"
  lane :internal_major do
    release_lane(update_type: "major", target: :internal)
  end

  desc "Production release - patch"
  lane :production_patch do
    release_lane(update_type: "patch", target: :production)
  end

  desc "Production release - minor"
  lane :production_minor do
    release_lane(update_type: "minor", target: :production)
  end

  desc "Production release - major"
  lane :production_major do
    release_lane(update_type: "major", target: :production)
  end
end