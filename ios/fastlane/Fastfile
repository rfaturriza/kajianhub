require 'net/http'
require 'json'
require 'uri'

default_platform(:ios)

platform :ios do
  desc "Test release notes generation with Gemini AI"
  lane :test_release_notes do
    # Skip before_all setup for this test lane
    release_notes = generate_release_notes_with_gemini
    UI.success("Generated Release Notes:")
    UI.message("English (en-US):")
    UI.message(release_notes["en-US"])
    UI.message("")
    UI.message("Indonesian (id):")
    UI.message(release_notes["id"])
  end

  before_all do
    # Skip setup for test lanes
    next if ENV["SKIP_SETUP"] == "true"
    
    # Ensure required environment variables are set
    %w[APP_STORE_CONNECT_KEY_ID APP_STORE_CONNECT_ISSUER_ID APP_STORE_CONNECT_API_KEY_CONTENT].each do |var|
      UI.user_error!("Missing environment variable: #{var}") if ENV[var].to_s.empty?
    end
    
    # Set CI environment for non-interactive mode
    ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
    ENV["FASTLANE_HIDE_CHANGELOG"] = "1"
    ENV["FASTLANE_DISABLE_COLORS"] = "1" if ENV["CI"] == "true"
    
    setup_ci

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      is_key_content_base64: true,
      in_house: false
    )

    sync_code_signing(type: "appstore")
  end

  private_lane :generate_release_notes_with_gemini do |options|
    # Get commits since last tag
    last_tag = sh("git describe --tags --abbrev=0", log: false).strip rescue "HEAD~10"
    commits = sh("git log #{last_tag}..HEAD --oneline --no-merges", log: false).strip
    
    if commits.empty?
      fallback_notes_en = "Minor bug fixes and improvements"
      fallback_notes_id = "Perbaikan bug kecil dan peningkatan performa"
      return {
        "en-US" => fallback_notes_en,
        "id" => fallback_notes_id
      }
    end

    # Call Gemini API
    gemini_api_key = ENV["GEMINI_API_KEY"]&.strip
    if gemini_api_key.nil? || gemini_api_key.empty?
      UI.important("GEMINI_API_KEY not set. Using default release notes.")
      fallback_notes_en = "* Bug fixes and performance improvements\n* Enhanced user experience\n* General stability improvements"
      fallback_notes_id = "* Perbaikan bug dan peningkatan performa\n* Pengalaman pengguna yang lebih baik\n* Peningkatan stabilitas umum"
      return {
        "en-US" => fallback_notes_en,
        "id" => fallback_notes_id
      }
    end

    UI.message("API Key present, generating release notes in English and Indonesian...")

    # Generate English release notes
    english_notes = generate_notes_for_language(commits: commits, language: "English", api_key: gemini_api_key)
    
    # Generate Indonesian release notes
    indonesian_notes = generate_notes_for_language(commits: commits, language: "Indonesian", api_key: gemini_api_key)

    {
      "en-US" => english_notes,
      "id" => indonesian_notes
    }
  end

  private_lane :generate_notes_for_language do |options|
    commits = options[:commits]
    language = options[:language]
    api_key = options[:api_key]
    
    # Prepare prompt for specific language
    if language == "Indonesian"
      prompt = <<~PROMPT
        Generate catatan rilis yang ringkas untuk aplikasi mobile berdasarkan git commits ini. 
        Fokus pada fitur dan peningkatan yang dapat dilihat pengguna. Maksimal 4000 karakter.
        Format sebagai teks biasa dengan bullet points menggunakan asterisk (*).
        Gunakan kategori seperti "Baru:", "Ditingkatkan:", dan "Diperbaiki:" bila sesuai.
        Tulis dalam bahasa Indonesia yang jelas dan mudah dipahami pengguna. jangan gunakan jargon teknis secara detail. hanya cantumkan informasi fiturnya jangan detail teknis seperti kode, algoritma, components, atau lainnya.
        
        Format contoh:
        * Baru: Deskripsi fitur baru di sini
        * Ditingkatkan: Deskripsi peningkatan di sini
        * Diperbaiki: Deskripsi perbaikan bug di sini
        
        Commits:
        #{commits}
        
        Buat catatan rilis profesional:
      PROMPT
    else
      prompt = <<~PROMPT
        Generate concise release notes for a mobile app based on these git commits. 
        Focus on user-facing features and improvements. Keep it under 4000 characters.
        Format as plain text with simple bullet points using asterisks (*).
        Use categories like "New:", "Improved:", and "Fixed:" when appropriate.
        Write in clear, user-friendly language that customers will understand, don't use technical jargon with details like code, algorithms, components ui, or others.
        
        Example format:
        * New: Feature description here
        * Improved: Enhancement description here  
        * Fixed: Bug fix description here
        
        Commits:
        #{commits}
        
        Generate professional release notes:
      PROMPT
    end

    begin
      uri = URI("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=#{api_key}")
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true

      request = Net::HTTP::Post.new(uri)
      request['Content-Type'] = 'application/json'

      request.body = {
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.3,
          maxOutputTokens: 500,
          candidateCount: 1
        }
      }.to_json

      response = http.request(request)
      
      if response.code == '200'
        result = JSON.parse(response.body)
        release_notes = result.dig('candidates', 0, 'content', 'parts', 0, 'text')&.strip
        
        if release_notes && !release_notes.empty?
          UI.success("Generated #{language} release notes with Gemini AI")
          next release_notes
        end
      else
        UI.error("Gemini API error for #{language}: #{response.code} - #{response.body}")
      end
    rescue => e
      UI.error("Error calling Gemini API for #{language}: #{e.message}")
    end

    # Fallback release notes based on language
    if language == "Indonesian"
      "* Perbaikan bug dan peningkatan performa\n* Pengalaman pengguna yang lebih baik\n* Peningkatan stabilitas umum"
    else
      "* Bug fixes and performance improvements\n* Enhanced user experience\n* General stability improvements"
    end
  end

  private_lane :build_ios do
     build_ios_app(
       workspace: "Runner.xcworkspace",
       scheme: "Runner",
       output_directory: "./fastlane/build",
       output_name: "app.ipa",
       configuration: "Release",
       silent: true,
       clean: true,
       export_method: "app-store"
     )
   end

   private_lane :upload_internal do
     upload_to_testflight(
      ipa: "./fastlane/build/app.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true,
      distribute_external: false,
      notify_external_testers: false
     )
   end

   private_lane :upload_production do
    generated_notes = generate_release_notes_with_gemini
    
    UI.message("Generated release notes:")
    UI.message("English: #{generated_notes['en-US']}")
    UI.message("Indonesian: #{generated_notes['id']}")
    
    begin
      upload_to_app_store(
        ipa: "./fastlane/build/app.ipa",
        skip_screenshots: true,
        skip_metadata: true,
        skip_app_version_update: true,
        precheck_include_in_app_purchases: false,
        submit_for_review: ENV.fetch("SUBMIT_FOR_REVIEW", "false") == "true",
        automatic_release: ENV.fetch("AUTOMATIC_RELEASE", "false") == "true",
        release_notes: generated_notes,
        force: true,
        run_precheck_before_submit: false
      )
      UI.success("Successfully uploaded to App Store!")
    rescue => ex
      UI.error("Failed to upload to App Store: #{ex.message}")
      raise ex
    end
  end

  private_lane :sync_ios_version_with_pubspec do
    # Read version from pubspec.yaml (which was updated by GitHub Actions)
    pubspec_path = "../pubspec.yaml"
    unless File.exist?(pubspec_path)
      UI.user_error!("pubspec.yaml not found at #{pubspec_path}")
    end
    
    pubspec_content = File.read(pubspec_path)
    version_line = pubspec_content.match(/^version:\s*(.+)$/)
    
    if version_line.nil?
      UI.user_error!("Could not find version in pubspec.yaml")
    end
    
    full_version = version_line[1].strip
    version_name, build_number = full_version.split('+')
    
    UI.message("üì¶ Current iOS project version before sync:")
    current_ios_version = get_version_number(xcodeproj: "Runner.xcodeproj")
    current_ios_build = get_build_number(xcodeproj: "Runner.xcodeproj")
    UI.message("   Version: #{current_ios_version}, Build: #{current_ios_build}")
    
    UI.message("üìù Syncing iOS version with pubspec.yaml: #{version_name} (#{build_number})")
    
    # Update iOS project version to match pubspec.yaml
    increment_version_number(
      version_number: version_name,
      xcodeproj: "Runner.xcodeproj"
    )
    
    increment_build_number(
      build_number: build_number,
      xcodeproj: "Runner.xcodeproj"
    )
    
    # Verify the update
    updated_ios_version = get_version_number(xcodeproj: "Runner.xcodeproj")
    updated_ios_build = get_build_number(xcodeproj: "Runner.xcodeproj")
    
    UI.success("‚úÖ iOS version synced successfully!")
    UI.message("   New Version: #{updated_ios_version}, New Build: #{updated_ios_build}")
  end

  def release_lane(target:)
    # Note: Version bumping is now handled by GitHub Actions, not Fastlane.
    # Sync iOS version with the updated pubspec.yaml version.
    sync_ios_version_with_pubspec

    case target
    when :internal
      build_ios
      upload_internal
    when :production
      build_ios
      upload_production
    else
      UI.user_error!("Unknown target: #{target}")
    end
  end

  desc "Internal release to TestFlight (build number bump only)"
  lane :internal_patch do
    release_lane(target: :internal)
  end

  desc "Internal release to TestFlight (build number bump only)"
  lane :internal_minor do
    release_lane(target: :internal)
  end
  

  desc "Internal release to TestFlight (build number bump only)"
  lane :internal_major do
    release_lane(target: :internal)
  end

  desc "Production release - patch"
  lane :production_patch do
    release_lane(target: :production)
  end

  desc "Production release - minor"
  lane :production_minor do
    release_lane(target: :production)
  end

  desc "Production release - major"
  lane :production_major do
    release_lane(target: :production)
  end

  # Additional utility lanes
  desc "Internal release to TestFlight only"
  lane :internal_testflight_only do
    release_lane(target: :internal)
  end
end