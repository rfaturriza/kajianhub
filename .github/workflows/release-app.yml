name: Release App

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      lane:
        required: true
        type: string
      firebase_groups:
        required: false
        type: string
        default: "testers"
      commit_sha:
        required: false
        type: string
        description: "Specific commit SHA to checkout"

jobs:
  build:
    name: Release ${{ inputs.platform }}
    runs-on: ${{ inputs.platform == 'ios' && vars.MACOSVERSIONRUN || 'ubuntu-latest' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for release notes generation
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ inputs.commit_sha || github.sha }}

      - name: Ensure latest changes
        run: |
          # Fetch the latest changes to ensure we have the most recent version
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current version in pubspec.yaml:"
          grep "^version:" pubspec.yaml || echo "Version not found"

      - name: Setup Flutter Environment
        uses: ./.github/actions/setup-flutter-environment
        with:
          platform: ${{ inputs.platform }}
          setup-android: ${{ inputs.platform == 'android' }}
          setup-ios: ${{ inputs.platform == 'ios' }}
          install-ruby: "true"
        env:
          FIREBASE_OPTIONS: ${{ secrets.FIREBASE_OPTION_FILE }}
          FIREBASE_OPTIONS_DEBUG: ${{ secrets.FIREBASE_OPTION_FILE_DEBUG }}
          FIREBASE_ANDROID_JSON: ${{ secrets.GOOGLE_SERVICE_ANDROID_JSON_FILE }}
          FIREBASE_IOS_PLIST: ${{ secrets.GOOGLE_SERVICE_IOS_PLIST_FILE }}
          ENV_FILE: ${{ secrets.ENV_FILE }}

      - name: Execute Fastlane Lane
        run: |
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
            echo "storeFile=upload-keystore.jks" >> key.properties
            echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
            echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
            echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
            
            if [[ "${{ inputs.lane }}" == firebase_dist* ]]; then
              bundle exec fastlane ${{ inputs.lane }} groups:${{ inputs.firebase_groups }}
            else
              bundle exec fastlane ${{ inputs.lane }}
            fi
          else
            flutter build ios --config-only --no-codesign
            bundle exec fastlane match appstore --readonly
            bundle exec fastlane ${{ inputs.lane }}
          fi
        working-directory: ${{ inputs.platform }}
        env:
          # Android
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          PLAY_STORE_CONFIG_JSON: ${{ secrets.GPLAY_SERVICE_ACCOUNT_KEY_JSON }}

          # Firebase Distribution
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_ANDROID_DEBUG_APP_ID }}
          FIREBASE_CLI_TOKEN: ${{ secrets.FIREBASE_CLI_TOKEN }}

          # iOS
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

          # GEN AI
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
